@import 'bootstrap/dist/css/bootstrap';


@media (min-width: 992px) {  
  .dropdown-categories{
    width: 400px;
  }
}

.dropdown-item-p{
  text-decoration: none;
  color: #212529;
  margin-bottom: 6px;
  margin-top: 6px;
}

.dropdown-item-p:hover{
  text-decoration: none;
  color: none;
}

.problem-title{
  color: #212529;
}

.problem-title:hover{
  color: black;
}

// #editor{
//   background-color: #282a36 !important;
//   color: #f8f8f2 !important;
//   border: none;

//   font-family:'Courier New', Courier, monospace;
//     color: black;
//     direction: ltr;

//     border: 1px solid black;
//     font-size: 13px;
// }


.code-editor:focus{
  outline: none;
  background-color: rgba(43, 43, 43, 0.8) !important;
}

.problem-view{
  background-color: rgba(43, 43, 43, 0.8) !important;
  margin: 24px 0px;
}

.problem-view h1,.problem-view h4,.problem-view p{
  color : white;
}

.code-editor{

  // resize:none !important;
  outline: none;
width:auto;
// height:250px !important; 
font-size:11px !important;
font-family:monospace !important;
line-height:15px !important;
font-weight:500 !important;
margin: 0px 0px 0px 0px !important;
padding: 0px 0px 0px 0px !important;
resize: both !important;
color:#ffa !important;
border:0px !important;
border-radius: 0px !important;
background-color: rgba(43, 43, 43, 0.8) !important;
white-space:nowrap; 
overflow:auto !important;                   
scrollbar-arrow-color: #ee8 !important;
scrollbar-base-color: #444 !important;
scrollbar-track-color: #666 !important;
scrollbar-face-color: #444 !important;
scrollbar-3dlight-color: #444 !important;
scrollbar-highlight-color: #666 !important;
scrollbar-darkshadow-color: #444 !important;
scrollbar-shadow-color: #222 !important;

font-family: "Droid Sans Mono", "monospace", monospace !important;
font-weight: normal !important;
font-size: 13px !important;
font-feature-settings: "liga" 0, "calt" 0 !important;
line-height: 18px !important;
letter-spacing: 0px !important;
width: 389px !important;
height: 217px !important;
}

.code-editor::-webkit-scrollbar 
{
    width: 15px;
    background-color: #444;
    cursor: pointer;
}
.code-editor::-webkit-scrollbar-track 
{
    background-color: #222;
    cursor: pointer;
}
.code-editor::-webkit-scrollbar-corner
{
  background-color: #222;
  -webkit-box-shadow: inset 0 0 6px rgba(255,255,255,0.3);
}
.code-editor::-webkit-scrollbar-thumb 
{
  background-color: #444;
  /*outline: 1px solid #666;*/
  -webkit-box-shadow: inset 0 0 6px rgba(255,255,255,0.3);
  cursor: pointer;
}

.io-editor{
  height: 100px !important;
  resize: none !important;
}


.ide{
  background-color:rgba(0,0,0,0.90);
  position: absolute;
    bottom: 0;
    width: 100%; 
}

.height_100{
  height:100%;
}

// .enter-code-div{
//   flex-grow : 1;
//   flex-shrink: 0;
// }

.enter-code-ta{
  resize: none !important;
}

.problem-view-body{
  height: 600px;
  overflow-y: auto;
}

.problem-view-body::-webkit-scrollbar 
{
    width: 15px;
    background-color: #444;
    cursor: pointer;
}
.problem-view-body::-webkit-scrollbar-track 
{
    background-color: #222;
    cursor: pointer;
}
.problem-view-body::-webkit-scrollbar-corner
{
  background-color: #222;
  -webkit-box-shadow: inset 0 0 6px rgba(228, 228, 228, 0.3);
}
.problem-view-body::-webkit-scrollbar-thumb 
{
  background-color: #444;
  /*outline: 1px solid #666;*/
  -webkit-box-shadow: inset 0 0 6px rgba(255,255,255,0.3);
  cursor: pointer;
}

#compiler{
  color: #ee8;
  background: #222;
}

#compiler option, .ide-form{
  color: #ee8;
  background: #222;
}

#compiler option:hover{
  color: rgb(255, 42, 34) !important;
  background-color: rgb(58, 58, 58) !important;
}

.add-new-problem{
  text-decoration: none !important;
}


tr:hover {
  background-color: rgb(206, 204, 204) !important;
}

.ide_submit_spinner{
  visibility:hidden;
  width: 2rem; 
  height: 2rem;
}

.zoom{
  transition: 0.2s;
}

.zoom:hover{
  transform:scale(1.2);
}
.zoom:hover a{
  color: rgb(0, 138, 230);
}


$borderWidth: 5px;
$animationTime: .5s;
$border-color-default: #bbbbbb;
$border-color-fill: #ffb43e;
$size: 70px;
$howManySteps: 100; //this needs to be even. 

.t .progress {
  width: $size;
  height: $size;
  line-height: $size;
  background: none;
  margin: 0 auto;
  box-shadow: none;
  position: relative;
  &:after {
    content: "";
    width: 100%;
    height: 100%;
    border-radius: 50%;
    border: $borderWidth solid $border-color-default;
    position: absolute;
    top: 0;
    left: 0;
  }
  > span {
    width: 50%;
    height: 100%;
    overflow: hidden;
    position: absolute;
    top: 0;
    z-index: 1;
  }
  .progress-left {
    left: 0;
  }
  .progress-bar {
    width: 100%;
    height: 100%;
    background: none;
    border-width: $borderWidth;
    border-style: solid;
    position: absolute;
    top: 0;
    border-color: $border-color-fill;
  }
  .progress-left .progress-bar {
    left: 100%;
    border-top-right-radius: ($size/2);;
    border-bottom-right-radius: ($size/2);;
    border-left: 0;
    -webkit-transform-origin: center left;
    transform-origin: center left;
    //animation: loading-2 1.5s linear forwards 1.8s;
  }
  .progress-right {
    right: 0;
    .progress-bar {
      left: -100%;
      border-top-left-radius: ($size/2);;
      border-bottom-left-radius: ($size/2);;
      border-right: 0;
      -webkit-transform-origin: center right;
      transform-origin: center right;
      //animation: loading-1 1.8s linear forwards;
    }
  }
  .progress-value {
    display: flex;
    border-radius: 50%;
    font-size: 1rem;
    text-align: center;
    line-height: 20px;
    align-items: center;
    justify-content: center;
    height: 100%;
    width: 100%;
    font-weight: 300;
    div {
      //margin-top: 10px;
    }
    span {
      font-size: 12px;
      text-transform: uppercase;
    }
  }
}

/* This for loop creates the necessary css animation names 
Due to the split circle of progress-left and progress right, we must use the animations on each side. 
*/
@for $i from 1 through $howManySteps {
	$stepName: ($i*(100 / $howManySteps));

	//animation only the left side if below 50%
	@if $i <= ($howManySteps/2) { 
		.progress[data-percentage="#{$stepName}"] {
			.progress-right .progress-bar {
				 animation: loading-#{$i} $animationTime linear forwards;
			}
			.progress-left .progress-bar {animation: 0;}
		}
	}
	//animation only the right side if above 50%
	@if $i > ($howManySteps/2)  {  
		.progress[data-percentage="#{$stepName}"] {
			.progress-right .progress-bar {
				animation: loading-#{($howManySteps/2)} $animationTime linear forwards; //set the animation to longest animation
			}
			.progress-left .progress-bar {
      animation: loading-#{$i - ($howManySteps/2)} $animationTime linear forwards $animationTime;
    }
		}
	}
}

//animation
@for $i from 1 through ($howManySteps/2) { 
	$degrees: (180/($howManySteps/2));
	$degrees: ($degrees*$i);
	@keyframes loading-#{$i}{
    0%{
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
    }
    100%{
        -webkit-transform: rotate($degrees);
			transform: rotate(#{$degrees}deg);
    }
	}
}

